<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnalyzerPrefix" xml:space="preserve">
    <value>LC</value>
  </data>
  <data name="Rule0000ErrorInRuleDecription" xml:space="preserve">
    <value>There was an error in a Linter Rule</value>
  </data>
  <data name="Rule0000ErrorInRuleFormat" xml:space="preserve">
    <value>There was an Error in Rule "{0}" of type "{1}" {2}</value>
  </data>
  <data name="Rule0000ErrorInRuleTitle" xml:space="preserve">
    <value>There was an error in a Linter Rule</value>
  </data>
  <data name="Rule0001FlowFieldsShouldNotBeEditableDescription" xml:space="preserve">
    <value>FlowFields should not be editable.</value>
  </data>
  <data name="Rule0001FlowFieldsShouldNotBeEditableFormat" xml:space="preserve">
    <value>FlowFields should not be editable.</value>
  </data>
  <data name="Rule0001FlowFieldsShouldNotBeEditableTitle" xml:space="preserve">
    <value>FlowFields should not be editable.</value>
  </data>
  <data name="Rule0002CommitMustBeExplainedByCommentDescription" xml:space="preserve">
    <value>Commit() needs a comment to justify its existence. Either a leading or a trailing comment.</value>
  </data>
  <data name="Rule0002CommitMustBeExplainedByCommentFormat" xml:space="preserve">
    <value>Commit() needs a comment to justify its existence. Either a leading or a trailing comment.</value>
  </data>
  <data name="Rule0002CommitMustBeExplainedByCommentTitle" xml:space="preserve">
    <value>Commit() needs a comment to justify its existence. Either a leading or a trailing comment.</value>
  </data>
  <data name="Rule0003DoNotUseObjectIDsInVariablesOrPropertiesDescription" xml:space="preserve">
    <value>Do not use an Object ID for properties or variables declaration.</value>
  </data>
  <data name="Rule0003DoNotUseObjectIDsInVariablesOrPropertiesFormat" xml:space="preserve">
    <value>Do not use an Object ID for properties or variables declaration. Use {1} instead.</value>
  </data>
  <data name="Rule0003DoNotUseObjectIDsInVariablesOrPropertiesTitle" xml:space="preserve">
    <value>Do not use an Object ID for properties or variables declaration.</value>
  </data>
  <data name="Rule0004LookupPageIdAndDrillDownPageIdDescription" xml:space="preserve">
    <value>Property "LookupPageID" and "DrilldownPageID" must be filled in table because it is used in list page</value>
  </data>
  <data name="Rule0004LookupPageIdAndDrillDownPageIdFormat" xml:space="preserve">
    <value>Property "LookupPageID" and "DrilldownPageID" must be filled in table {0} because it is used in page {1} (list).</value>
  </data>
  <data name="Rule0004LookupPageIdAndDrillDownPageIdTitle" xml:space="preserve">
    <value>Property "LookupPageID" and "DrilldownPageID" must be filled in table because it is used in list page</value>
  </data>
  <data name="Rule0005VariableCasingShouldNotDifferFromDeclarationDescription" xml:space="preserve">
    <value>Wrong casing detected!</value>
  </data>
  <data name="Rule0005VariableCasingShouldNotDifferFromDeclarationFormat" xml:space="preserve">
    <value>Wrong casing detected! Use {0} instead.</value>
  </data>
  <data name="Rule0005VariableCasingShouldNotDifferFromDeclarationTitle" xml:space="preserve">
    <value>Wrong casing detected!</value>
  </data>
  <data name="Rule0006FieldNotAutoIncrementInTemporaryTableDescription" xml:space="preserve">
    <value>AutoIncrement fields are not possible in temporary tables!</value>
  </data>
  <data name="Rule0006FieldNotAutoIncrementInTemporaryTableFormat" xml:space="preserve">
    <value>AutoIncrement fields are not possible in temporary tables!</value>
  </data>
  <data name="Rule0006FieldNotAutoIncrementInTemporaryTableTitle" xml:space="preserve">
    <value>AutoIncrement fields are not possible in temporary tables!</value>
  </data>
  <data name="Rule0007DataPerCompanyShouldAlwaysBeSetDescription" xml:space="preserve">
    <value>DataPerCompany is missing!</value>
  </data>
  <data name="Rule0007DataPerCompanyShouldAlwaysBeSetFormat" xml:space="preserve">
    <value>DataPerCompany is missing!</value>
  </data>
  <data name="Rule0007DataPerCompanyShouldAlwaysBeSetTitle" xml:space="preserve">
    <value>DataPerCompany is missing!</value>
  </data>
  <data name="Rule0008NoFilterOperatorsInSetRangeDescription" xml:space="preserve">
    <value>Filter operators should not be used in SetRange. Use SetFilter instead.</value>
  </data>
  <data name="Rule0008NoFilterOperatorsInSetRangeFormat" xml:space="preserve">
    <value>Filter operators should not be used in SetRange. Use SetFilter instead.</value>
  </data>
  <data name="Rule0008NoFilterOperatorsInSetRangeTitle" xml:space="preserve">
    <value>Filter operators should not be used in SetRange. Use SetFilter instead.</value>
  </data>
  <data name="Rule0009CodeMetricsInfoDescription" xml:space="preserve">
    <value>Cyclomatic complexity and Maintainability index</value>
  </data>
  <data name="Rule0009CodeMetricsInfoFormat" xml:space="preserve">
    <value>Cyclomatic complexity: {0} (threshold &gt;={1}), Maintainability index: {2} of 100 (threshold &lt;={3})</value>
  </data>
  <data name="Rule0009CodeMetricsInfoTitle" xml:space="preserve">
    <value>Cyclomatic complexity and Maintainability index</value>
  </data>
  <data name="Rule0011AccessPropertyShouldAlwaysBeSetDescription" xml:space="preserve">
    <value>Access property is missing!</value>
  </data>
  <data name="Rule0011AccessPropertyShouldAlwaysBeSetFormat" xml:space="preserve">
    <value>Access property is missing!</value>
  </data>
  <data name="Rule0011AccessPropertyShouldAlwaysBeSetTitle" xml:space="preserve">
    <value>Access property is missing!</value>
  </data>
  <data name="Rule0012DoNotUseObjectIdInSystemFunctionsDescription" xml:space="preserve">
    <value>Wrong Parameter detected.</value>
  </data>
  <data name="Rule0012DoNotUseObjectIdInSystemFunctionsFormat" xml:space="preserve">
    <value>Wrong Parameter detected. Select the correct object with "{0}::" instead.</value>
  </data>
  <data name="Rule0012DoNotUseObjectIdInSystemFunctionsTitle" xml:space="preserve">
    <value>Wrong Parameter detected.</value>
  </data>
  <data name="Rule0013CheckForNotBlankOnSingleFieldPrimaryKeysTitle" xml:space="preserve">
    <value>NotBlank should be set explicitly for tables with a single-field primary key.</value>
  </data>
  <data name="Rule0013CheckForNotBlankOnSingleFieldPrimaryKeysFormat" xml:space="preserve">
    <value>NotBlank should be set explicitly for tables with a single-field primary key.</value>
  </data>
  <data name="Rule0013CheckForNotBlankOnSingleFieldPrimaryKeysDescription" xml:space="preserve">
    <value>NotBlank should be set explicitly for tables with a single-field primary key.</value>
  </data>
  <data name="Rule0014PermissionSetCaptionLengthDescription" xml:space="preserve">
    <value>The Caption of permissionset objects should not exceed the maximum length.</value>
  </data>
  <data name="Rule0014PermissionSetCaptionLengthFormat" xml:space="preserve">
    <value>The Caption of permissionset objects should not exceed {0} characters. Use MaxLength={0} or Locked=true to ensure there are no translations that exceed this limit.</value>
  </data>
  <data name="Rule0014PermissionSetCaptionLengthTitle" xml:space="preserve">
    <value>The Caption of permissionset objects should not exceed the maximum length.</value>
  </data>
  <data name="Rule0015PermissionSetCoverageDescription" xml:space="preserve">
    <value>All application objects should be covered by at least one permission set in the extension.</value>
  </data>
  <data name="Rule0015PermissionSetCoverageFormat" xml:space="preserve">
    <value>The application object {0} "{1}" is not covered by any permission set in the extension.</value>
  </data>
  <data name="Rule0015PermissionSetCoverageTitle" xml:space="preserve">
    <value>All application objects should be covered by at least one permission set in the extension.</value>
  </data>
  <data name="Rule0016CheckForMissingCaptionsDescription" xml:space="preserve">
    <value>Caption is missing.</value>
  </data>
  <data name="Rule0016CheckForMissingCaptionsFormat" xml:space="preserve">
    <value>Caption is missing.</value>
  </data>
  <data name="Rule0016CheckForMissingCaptionsTitle" xml:space="preserve">
    <value>Caption is missing.</value>
  </data>
  <data name="Rule0017WriteToFlowFieldDescription" xml:space="preserve">
    <value>Writing to a FlowField is not common. Add a comment to explain this.</value>
  </data>
  <data name="Rule0017WriteToFlowFieldFormat" xml:space="preserve">
    <value>Writing to a FlowField is not common. Add a comment to explain this.</value>
  </data>
  <data name="Rule0017WriteToFlowFieldTitle" xml:space="preserve">
    <value>Writing to a FlowField is not common. Add a comment to explain this.</value>
  </data>
  <data name="Rule0018NoEventsInInternalCodeunitsDescription" xml:space="preserve">
    <value>Events in internal codeunits are not accessible to extensions and should therefore be avoided.</value>
  </data>
  <data name="Rule0018NoEventsInInternalCodeunitsFormat" xml:space="preserve">
    <value>The event {0} is declared in an internal codeunit {1}. Avoid events in internal codeunits as they are not accessible to extensions.</value>
  </data>
  <data name="Rule0018NoEventsInInternalCodeunitsTitle" xml:space="preserve">
    <value>Events in internal codeunits are not accessible to extensions and should therefore be avoided.</value>
  </data>
  <data name="Rule0019DataClassificationFieldEqualsTableDescription" xml:space="preserve">
    <value>Data Classification is equal to the Table. Remove to reduce redundancy.</value>
  </data>
  <data name="Rule0019DataClassificationFieldEqualsTableFormat" xml:space="preserve">
    <value>Data Classification is equal to the Table. Remove to reduce redundancy.</value>
  </data>
  <data name="Rule0019DataClassificationFieldEqualsTableTitle" xml:space="preserve">
    <value>Data Classification is equal to the Table. Remove to reduce redundancy.</value>
  </data>
  <data name="Rule0020ApplicationAreaEqualsToPageDescription" xml:space="preserve">
    <value>Application Area is equal to the Page. Remove to reduce redundancy.</value>
  </data>
  <data name="Rule0020ApplicationAreaEqualsToPageFormat" xml:space="preserve">
    <value>Application Area is equal to the Page. Remove to reduce redundancy.</value>
  </data>
  <data name="Rule0020ApplicationAreaEqualsToPageTitle" xml:space="preserve">
    <value>Application Area is equal to the Page. Remove to reduce redundancy.</value>
  </data>
  <data name="Rule0021ConfirmImplementConfirmManagement" xml:space="preserve">
    <value>Confirm() must be implemented through the "Confirm Management" codeunit from the System Application.</value>
  </data>
    <data name="Fix0021ConfirmImplementConfirmManagementMessage" xml:space="preserve">
    <value>Refactor to Confirm Management</value>
  </data>
  <data name="Rule0022GlobalLanguageImplementTranslationHelperDescription" xml:space="preserve">
    <value>GlobalLanguage() must be implemented through the "Translation Helper" codeunit from the Base Application.</value>
  </data>
  <data name="Rule0022GlobalLanguageImplementTranslationHelperFormat" xml:space="preserve">
    <value>GlobalLanguage() must be implemented through the "Translation Helper" codeunit from the Base Application.</value>
  </data>
  <data name="Rule0022GlobalLanguageImplementTranslationHelperTitle" xml:space="preserve">
    <value>GlobalLanguage() must be implemented through the "Translation Helper" codeunit from the Base Application.</value>
  </data>
  <data name="Rule0023AlwaysSpecifyFieldgroups" xml:space="preserve">
    <value>Fieldgroup "{0}" is missing on table "{1}".</value>
  </data>
  <data name="Rule0024SemicolonAfterMethodOrTriggerDeclarationDescription" xml:space="preserve">
    <value>Procedure or Trigger declaration should not end with semicolon.</value>
  </data>
  <data name="Rule0024SemicolonAfterMethodOrTriggerDeclarationFormat" xml:space="preserve">
    <value>Procedure or Trigger declaration should not end with semicolon.</value>
  </data>
  <data name="Rule0024SemicolonAfterMethodOrTriggerDeclarationTitle" xml:space="preserve">
    <value>Procedure or Trigger declaration should not end with semicolon.</value>
  </data>
  <data name="Rule0025InternalProcedureModifierDescription" xml:space="preserve">
    <value>Procedure must be either local, internal or define a documentation comment.</value>
  </data>
  <data name="Rule0025InternalProcedureModifierFormat" xml:space="preserve">
    <value>Procedure must be either local, internal or define a documentation comment.</value>
  </data>
  <data name="Rule0025InternalProcedureModifierTitle" xml:space="preserve">
    <value>Procedure must be either local, internal or define a documentation comment.</value>
  </data>
  <data name="Rule0026ToolTipMustEndWithDotDescription" xml:space="preserve">
    <value>ToolTip must end with a dot.</value>
  </data>
  <data name="Rule0026ToolTipMustEndWithDotFormat" xml:space="preserve">
    <value>ToolTip must end with a dot.</value>
  </data>
  <data name="Rule0026ToolTipMustEndWithDotTitle" xml:space="preserve">
    <value>ToolTip must end with a dot.</value>
  </data>
  <data name="Rule0027RunPageImplementPageManagementTitle" xml:space="preserve">
    <value>Utilize Page Management codeunit for launching page.</value>
  </data>
  <data name="Rule0027RunPageImplementPageManagementFormat" xml:space="preserve">
    <value>Utilize the "Page Management" codeunit for launching page.</value>
  </data>
  <data name="Rule0027RunPageImplementPageManagementDescription" xml:space="preserve">
    <value>Utilizing the Page Management codeunit rather than invoking Page.Run directly.</value>
  </data>
  <data name="Rule0028IdentifiersInEventSubscribersDescription" xml:space="preserve">
    <value>Event subscriber arguments now use identifier syntax instead of string literals.</value>
  </data>
  <data name="Rule0028IdentifiersInEventSubscribersFormat" xml:space="preserve">
    <value>Event subscriber arguments now use identifier syntax instead of string literals.</value>
  </data>
  <data name="Rule0028IdentifiersInEventSubscribersTitle" xml:space="preserve">
    <value>Event subscriber arguments now use identifier syntax instead of string literals.</value>
  </data>
  <data name="Rule0029CompareDateTimeThroughCodeunitDescription" xml:space="preserve">
    <value>Use CompareDateTime method in Type Helper codeunit for DateTime variable comparisons.</value>
  </data>
  <data name="Rule0029CompareDateTimeThroughCodeunitFormat" xml:space="preserve">
    <value>Use CompareDateTime method in Type Helper codeunit for DateTime variable comparisons.</value>
  </data>
  <data name="Rule0029CompareDateTimeThroughCodeunitTitle" xml:space="preserve">
    <value>Use CompareDateTime method in Type Helper codeunit for DateTime variable comparisons.</value>
  </data>
  <data name="Rule0030AccessInternalForInstallAndUpgradeCodeunitsDescription" xml:space="preserve">
    <value>Set Access property to Internal for Install/Upgrade codeunits.</value>
  </data>
  <data name="Rule0030AccessInternalForInstallAndUpgradeCodeunitsFormat" xml:space="preserve">
    <value>Set Access property to Internal for Install/Upgrade codeunits.</value>
  </data>
  <data name="Rule0030AccessInternalForInstallAndUpgradeCodeunitsTitle" xml:space="preserve">
    <value>Set Access property to Internal for Install/Upgrade codeunits.</value>
  </data>
  <data name="Rule0031RecordInstanceIsolationLevelTitle" xml:space="preserve">
    <value>Use ReadIsolation instead of LockTable.</value>
  </data>
  <data name="Rule0031RecordInstanceIsolationLevelFormat" xml:space="preserve">
    <value>Use ReadIsolation(IsolationLevel::UpdLock) instead of LockTable().</value>
  </data>
  <data name="Rule0031RecordInstanceIsolationLevelDescription" xml:space="preserve">
    <value>Use the ReadIsolation method to control isolation level on database transactions instead of the LockTable method.</value>
  </data>
  <data name="Rule0032ClearCodeunitSingleInstanceTitle" xml:space="preserve">
    <value>Clear(All) does not affect or change values for global variables in '{0}: Codeunit {1}'.</value>
  </data>
  <data name="Rule0032ClearCodeunitSingleInstanceFormat" xml:space="preserve">
    <value>Clear(All) does not affect or change values for global variables in '{0}: Codeunit {1}'.</value>
  </data>
  <data name="Rule0032ClearCodeunitSingleInstanceDescription" xml:space="preserve">
    <value>Clear(All) does not affect or change values for global variables in '{0}: Codeunit {1}'.</value>
  </data>
  <data name="Rule0033AppManifestRuntimeBehindTitle" xml:space="preserve">
    <value>The specified runtime version in app.json is falling behind. The project targets {0} version {1} and the current runtime is {2}. Update the runtime to {3} for compatibility with the latest runtime features.</value>
  </data>
  <data name="Rule0033AppManifestRuntimeBehindFormat" xml:space="preserve">
    <value>The specified runtime version in app.json is falling behind. The project targets {0} version {1} and the current runtime is {2}. Update the runtime to {3} for compatibility with the latest runtime features.</value>
  </data>
  <data name="Rule0033AppManifestRuntimeBehindDescription" xml:space="preserve">
    <value>The specified runtime version in app.json is falling behind. The project targets {0} version {1} and the current runtime is {2}. Update the runtime to {3} for compatibility with the latest runtime features.</value>
  </data>
  <data name="Rule0034ExtensiblePropertyShouldAlwaysBeSetTitle" xml:space="preserve">
    <value>The property Extensible should be explicitly set for {0} objects.</value>
  </data>
  <data name="Rule0034ExtensiblePropertyShouldAlwaysBeSetFormat" xml:space="preserve">
    <value>The property Extensible should be explicitly set for {0} objects.</value>
  </data>
  <data name="Rule0034ExtensiblePropertyShouldAlwaysBeSetDescription" xml:space="preserve">
    <value>The property Extensible should be explicitly set for {0} objects.</value>
  </data>
  <data name="Rule0035ExplicitSetAllowInCustomizationsTitle" xml:space="preserve">
    <value>Explicitly set AllowInCustomizations for fields omitted on pages.</value>
  </data>
  <data name="Rule0035ExplicitSetAllowInCustomizationsFormat" xml:space="preserve">
    <value>Explicitly set AllowInCustomizations for fields omitted on pages.</value>
  </data>
  <data name="Rule0035ExplicitSetAllowInCustomizationsDescription" xml:space="preserve">
    <value>Explicitly set AllowInCustomizations for fields omitted on pages.</value>
  </data>
  <data name="Rule0036ToolTipShouldStartWithSpecifiesDescription" xml:space="preserve">
    <value>ToolTip must start with the verb "Specifies".</value>
  </data>
  <data name="Rule0036ToolTipShouldStartWithSpecifiesFormat" xml:space="preserve">
    <value>ToolTip must start with the verb "Specifies".</value>
  </data>
  <data name="Rule0036ToolTipShouldStartWithSpecifiesTitle" xml:space="preserve">
    <value>ToolTip must start with the verb "Specifies".</value>
  </data>
  <data name="Rule0037ToolTipDoNotUseLineBreaksDescription" xml:space="preserve">
    <value>Do not use line breaks in ToolTip.</value>
  </data>
  <data name="Rule0037ToolTipDoNotUseLineBreaksFormat" xml:space="preserve">
    <value>Do not use line breaks in ToolTip.</value>
  </data>
  <data name="Rule0037ToolTipDoNotUseLineBreaksTitle" xml:space="preserve">
    <value>Do not use line breaks in ToolTip.</value>
  </data>
  <data name="Rule0038ToolTipMaximumLengthDescription" xml:space="preserve">
    <value>Try to not exceed 200 characters (including spaces).</value>
  </data>
  <data name="Rule0038ToolTipMaximumLengthFormat" xml:space="preserve">
    <value>Try to not exceed 200 characters (including spaces).</value>
  </data>
  <data name="Rule0038ToolTipMaximumLengthTitle" xml:space="preserve">
    <value>Try to not exceed 200 characters (including spaces).</value>
  </data>
  <data name="Rule0039ArgumentDifferentTypeThenExpectedDescription" xml:space="preserve">
    <value>Argument {0}: cannot convert from {1} to {2}.</value>
  </data>
  <data name="Rule0039ArgumentDifferentTypeThenExpectedFormat" xml:space="preserve">
    <value>Argument {0}: cannot convert from {1} to {2}.</value>
  </data>
  <data name="Rule0039ArgumentDifferentTypeThenExpectedTitle" xml:space="preserve">
    <value>Argument {0}: cannot convert from {1} to {2}.</value>
  </data>
  <data name="Rule0040ExplicitlySetRunTriggerTitle" xml:space="preserve">
    <value>Explicitly set the RunTrigger parameter on build-in methods.</value>
  </data>
  <data name="Rule0040ExplicitlySetRunTriggerFormat" xml:space="preserve">
    <value>Explicitly set the RunTrigger parameter on build-in methods.</value>
  </data>
  <data name="Rule0040ExplicitlySetRunTriggerDescription" xml:space="preserve">
    <value>Explicitly set the RunTrigger parameter on build-in methods.</value>
  </data>
  <data name="Rule0041EmptyCaptionLockedTitle" xml:space="preserve">
    <value>Empty captions should be locked.</value>
  </data>
  <data name="Rule0041EmptyCaptionLockedFormat" xml:space="preserve">
    <value>Empty captions should be locked.</value>
  </data>
  <data name="Rule0041EmptyCaptionLockedDescription" xml:space="preserve">
    <value>Empty captions should be locked.</value>
  </data>
  <data name="Rule0042AutoCalcFieldsOnNormalFieldsTitle" xml:space="preserve">
    <value>The SetAutoCalcFields method should only be used with FlowFields or fields of type Blob. The field {0} is not a FlowField or of type Blob.</value>
  </data>
  <data name="Rule0042AutoCalcFieldsOnNormalFieldsFormat" xml:space="preserve">
    <value>The SetAutoCalcFields method should only be used with FlowFields or fields of type Blob. The field {0} is not a FlowField or of type Blob.</value>
  </data>
  <data name="Rule0042AutoCalcFieldsOnNormalFieldsDescription" xml:space="preserve">
    <value>The SetAutoCalcFields method should only be used with FlowFields or fields of type Blob. The field {0} is not a FlowField or of type Blob.</value>
  </data>
  <data name="Rule0043SecretTextTitle" xml:space="preserve">
    <value>Use SecretText type to protect credentials and sensitive textual values from being revealed.</value>
  </data>
  <data name="Rule0043SecretTextFormat" xml:space="preserve">
    <value>Use SecretText type to protect credentials and sensitive textual values from being revealed.</value>
  </data>
  <data name="Rule0043SecretTextDescription" xml:space="preserve">
    <value>Use SecretText type to protect credentials and sensitive textual values from being revealed.</value>
  </data>
  <data name="Rule0044AnalyzeTableExtensionTitle" xml:space="preserve">
    <value>Conflicting ID, Name or Type with Table '{0}'</value>
  </data>
  <data name="Rule0044AnalyzeTableExtensionFormat" xml:space="preserve">
    <value>Conflicting ID, Name or Type with Table '{0}'</value>
  </data>
  <data name="Rule0044AnalyzeTableExtensionDescription" xml:space="preserve">
    <value>Conflicting ID, Name or Type with Table '{0}'</value>
  </data>
  <data name="Rule0044AnalyzeTransferFieldsTitle" xml:space="preserve">
    <value>Records '{0}' and '{1}' have conflicting fields with the same ID</value>
  </data>
  <data name="Rule0044AnalyzeTransferFieldsFormat" xml:space="preserve">
    <value>Records '{0}' and '{1}' have conflicting fields with the same ID</value>
  </data>
  <data name="Rule0044AnalyzeTransferFieldsDescription" xml:space="preserve">
    <value>Records '{0}' and '{1}' have conflicting fields with the same ID</value>
  </data>
  <data name="Rule0045ZeroEnumValueReservedForEmptyTitle" xml:space="preserve">
    <value>Zero (0) Enum value should be reserved for Empty Value.</value>
  </data>
  <data name="Rule0045ZeroEnumValueReservedForEmptyFormat" xml:space="preserve">
    <value>Zero (0) Enum value should be reserved for Empty Value.</value>
  </data>
  <data name="Rule0045ZeroEnumValueReservedForEmptyDescription" xml:space="preserve">
    <value>Zero (0) Enum value should be reserved for Empty Value.</value>
  </data>
  <data name="Rule0046TokLabelsLockedTitle" xml:space="preserve">
    <value>Label with suffix Tok must be locked.</value>
  </data>
  <data name="Rule0046TokLabelsLockedFormat" xml:space="preserve">
    <value>Label with suffix Tok must be locked.</value>
  </data>
  <data name="Rule0046TokLabelsLockedDescription" xml:space="preserve">
    <value>Label with suffix Tok must be locked.</value>
  </data>
  <data name="Rule0047LockedLabelsTokTitle" xml:space="preserve">
    <value>Locked Label must have a suffix Tok.</value>
  </data>
  <data name="Rule0047LockedLabelsTokFormat" xml:space="preserve">
    <value>Locked Label must have a suffix Tok.</value>
  </data>
  <data name="Rule0047LockedLabelsTokDescription" xml:space="preserve">
    <value>Locked Label must have a suffix Tok.</value>
  </data>
  <data name="Rule0048ErrorWithTextConstantTitle" xml:space="preserve">
    <value>Use Error with a ErrorInfo or Label variable to improve telemetry details.</value>
  </data>
  <data name="Rule0048ErrorWithTextConstantFormat" xml:space="preserve">
    <value>Use Error with a ErrorInfo or Label variable to improve telemetry details.</value>
  </data>
  <data name="Rule0048ErrorWithTextConstantDescription" xml:space="preserve">
    <value>Use Error with a ErrorInfo or Label variable to improve telemetry details.</value>
  </data>
  <data name="Rule0049PageWithoutSourceTableTitle" xml:space="preserve">
    <value>SourceTable property not defined on {0} '{1}'.</value>
  </data>
  <data name="Rule0049PageWithoutSourceTableFormat" xml:space="preserve">
    <value>SourceTable property not defined on {0} '{1}'.</value>
  </data>
  <data name="Rule0049PageWithoutSourceTableDescription" xml:space="preserve">
    <value>SourceTable property not defined on {0} '{1}'.</value>
  </data>
  <data name="Rule0050OperatorAndPlaceholderInFilterExpressionTitle" xml:space="preserve">
    <value>Found operator '{0}' together with placeholder '{1}' in filter expression, which results in unexpected behavior. Use the StrSubstNo() method to circumvent this.</value>
  </data>
  <data name="Rule0050OperatorAndPlaceholderInFilterExpressionFormat" xml:space="preserve">
    <value>Found operator '{0}' together with placeholder '{1}' in filter expression, which results in unexpected behavior. Use the StrSubstNo() method to circumvent this.</value>
  </data>
  <data name="Rule0050OperatorAndPlaceholderInFilterExpressionDescription" xml:space="preserve">
    <value>Found operator '{0}' together with placeholder '{1}' in filter expression, which results in unexpected behavior. Use the StrSubstNo() method to circumvent this.</value>
  </data>
  <data name="Rule0051PossibleOverflowAssigningTitle" xml:space="preserve">
    <value>Do not assign a text to a target with smaller size.</value>
  </data>
  <data name="Rule0051PossibleOverflowAssigningFormat" xml:space="preserve">
    <value>Possible overflow assigning '{0}' to '{1}'.</value>
  </data>
  <data name="Rule0051PossibleOverflowAssigningDescription" xml:space="preserve">
    <value>Do not assign a text to a target with smaller size.</value>
  </data>
  <data name="Rule0052InternalProceduresNotReferencedAnalyzerDescription" xml:space="preserve">
    <value>The internal method is declared but never used.</value>
  </data>
  <data name="Rule0052InternalProceduresNotReferencedAnalyzerFormat" xml:space="preserve">
    <value>The {0} method {1} in {2} {3} (Access = {4}) is declared but never used.</value>
  </data>
  <data name="Rule0052InternalProceduresNotReferencedAnalyzerTitle" xml:space="preserve">
    <value>The internal method is declared but never used.</value>
  </data>
  <data name="Rule0053InternalProcedureOnlyUsedInCurrentObjectAnalyzerDescription" xml:space="preserve">
    <value>The internal method is only used in the object in which it is declared.</value>
  </data>
  <data name="Rule0053InternalProcedureOnlyUsedInCurrentObjectAnalyzerFormat" xml:space="preserve">
    <value>The {0} method {1} is only used in the object {2} {3} (Access = {4}) in which it is declared. Consider making the procedure local.</value>
  </data>
  <data name="Rule0053InternalProcedureOnlyUsedInCurrentObjectAnalyzerTitle" xml:space="preserve">
    <value>The internal method is only used in the object in which it is declared.</value>
  </data>
  <data name="Rule0054FollowInterfaceObjectNameGuideTitle" xml:space="preserve">
    <value>Interface name must start with the capital 'I' without any spaces following it.</value>
  </data>
  <data name="Rule0054FollowInterfaceObjectNameGuideFormat" xml:space="preserve">
    <value>Interface name must start with the capital 'I' without any spaces following it.</value>
  </data>
  <data name="Rule0054FollowInterfaceObjectNameGuideDescription" xml:space="preserve">
    <value>Interface name must start with the capital 'I' without any spaces following it.</value>
  </data>
  <data name="Rule0055TokSuffixForTokenLabelsTitle" xml:space="preserve">
    <value>The suffix 'Tok' is meant to be used when the value of the label matches the name.</value>
  </data>
  <data name="Rule0055TokSuffixForTokenLabelsFormat" xml:space="preserve">
    <value>The suffix 'Tok' is meant to be used when the value of the label matches the name.</value>
  </data>
  <data name="Rule0055TokSuffixForTokenLabelsDescription" xml:space="preserve">
    <value>The suffix 'Tok' is meant to be used when the value of the label matches the name.</value>
  </data>
  <data name="Rule0056EmptyEnumValueWithCaptionTitle" xml:space="preserve">
    <value>Empty Enum values should not have a specified Caption property.</value>
  </data>
  <data name="Rule0056EmptyEnumValueWithCaptionFormat" xml:space="preserve">
    <value>Empty Enum values should not have a specified Caption property.</value>
  </data>
  <data name="Rule0056EmptyEnumValueWithCaptionDescription" xml:space="preserve">
    <value>Empty Enum values should not have a specified Caption property.</value>
  </data>
  <data name="Rule0057EnumValueWithEmptyCaptionTitle" xml:space="preserve">
    <value>Enum values must have non-empty a Caption to be selectable in the client.</value>
  </data>
  <data name="Rule0057EnumValueWithEmptyCaptionFormat" xml:space="preserve">
    <value>Enum values must have non-empty a Caption to be selectable in the client.</value>
  </data>
  <data name="Rule0057EnumValueWithEmptyCaptionDescription" xml:space="preserve">
    <value>Enum values must have non-empty a Caption to be selectable in the client.</value>
  </data>
  <data name="Rule0058PageVariableMethodOnTemporaryTableTitle" xml:space="preserve">
    <value>{0}.{1}(): You cannot use a temporary record for the Record parameter.</value>
  </data>
  <data name="Rule0058PageVariableMethodOnTemporaryTableFormat" xml:space="preserve">
    <value>{0}.{1}(): You cannot use a temporary record for the Record parameter.</value>
  </data>
  <data name="Rule0058PageVariableMethodOnTemporaryTableDescription" xml:space="preserve">
    <value>{0}.{1}(): You cannot use a temporary record for the Record parameter.</value>
  </data>
  <data name="Rule0059SingleQuoteEscapingIssueDetectedTitle" xml:space="preserve">
    <value>Single quote escaping issue detected: Use %1 or '''' for correct text escaping.</value>
  </data>
  <data name="Rule0059SingleQuoteEscapingIssueDetectedFormat" xml:space="preserve">
    <value>Single quote escaping issue detected: Use %1 or '''' for correct text escaping.</value>
  </data>
  <data name="Rule0059SingleQuoteEscapingIssueDetectedDescription" xml:space="preserve">
    <value>Single quote escaping issue detected: Use %1 or '''' for correct text escaping.</value>
  </data>
  <data name="Rule0060PropertyApplicationAreaOnApiPageTitle" xml:space="preserve">
    <value>The 'ApplicationArea' property is not applicable to API pages.</value>
  </data>
  <data name="Rule0060PropertyApplicationAreaOnApiPageFormat" xml:space="preserve">
    <value>The 'ApplicationArea' property is not applicable to API pages.</value>
  </data>
  <data name="Rule0060PropertyApplicationAreaOnApiPageDescription" xml:space="preserve">
    <value>The 'ApplicationArea' property is not applicable to API pages"</value>
  </data>
  <data name="Rule0061SetODataKeyFieldsWithSystemIdFieldTitle" xml:space="preserve">
    <value>Pages of type API must have the 'ODataKeyFields' property set to the 'SystemId' field.</value>
  </data>
  <data name="Rule0061SetODataKeyFieldsWithSystemIdFieldFormat" xml:space="preserve">
    <value>Pages of type API must have the 'ODataKeyFields' property set to the 'SystemId' field.</value>
  </data>
  <data name="Rule0061SetODataKeyFieldsWithSystemIdFieldDescription" xml:space="preserve">
    <value>Pages of type API must have the 'ODataKeyFields' property set to the 'SystemId' field.</value>
  </data>
  <data name="Rule0062MandatoryFieldMissingOnApiPageTitle" xml:space="preserve">
    <value>"Field 'Rec.{0}' exposed with the name '{1}' should always be included on API Pages."</value>
  </data>
  <data name="Rule0062MandatoryFieldMissingOnApiPageFormat" xml:space="preserve">
    <value>"Field 'Rec.{0}' exposed with the name '{1}' should always be included on API Pages."</value>
  </data>
  <data name="Rule0062MandatoryFieldMissingOnApiPageDescription" xml:space="preserve">
    <value>"Field 'Rec.{0}' exposed with the name '{1}' should always be included on API Pages."</value>
  </data>
  <data name="Rule0063GiveFieldMoreDescriptiveNameTitle" xml:space="preserve">
    <value>Give field more describing name.</value>
  </data>
  <data name="Rule0063GiveFieldMoreDescriptiveNameFormat" xml:space="preserve">
    <value>Consider naming field with a more descriptive name: '{0}'.</value>
  </data>
  <data name="Rule0063GiveFieldMoreDescriptiveNameDescription" xml:space="preserve">
    <value>It is common for API pages to give certain fields a more describing name.</value>
  </data>
  <data name="Rule0064TableFieldMissingToolTipTitle" xml:space="preserve">
    <value>Missing ToolTip property on table field.</value>
  </data>
  <data name="Rule0064TableFieldMissingToolTipFormat" xml:space="preserve">
    <value>A value for the ToolTip property is missing for the table field {0} of page field {1}. Consider adding a ToolTip for table field {0} and/or removing the ToolTip from page field {1}.</value>
  </data>
  <data name="Rule0064TableFieldMissingToolTipDescription" xml:space="preserve">
    <value>Informs the user that it is better to apply the ToolTip property on the table field instead of the page field.</value>
  </data>
  <data name="Rule0065EventSubscriberVarCheckTitle" xml:space="preserve">
    <value>Event subscriber var keyword mismatch.</value>
  </data>
  <data name="Rule0065EventSubscriberVarCheckFormat" xml:space="preserve">
    <value>Parameter '{0}' must use the 'var' keyword if the publisher parameter is 'var'.</value>
  </data>
  <data name="Rule0065EventSubscriberVarCheckDescription" xml:space="preserve">
    <value>Ensures that event subscriber methods use 'var' keyword for parameters as defined by event publisher.</value>
  </data>
  <data name="Rule0066DuplicateToolTipBetweenPageAndTableTitle" xml:space="preserve">
    <value>Duplicate ToolTip between page and table field.</value>
  </data>
  <data name="Rule0066DuplicateToolTipBetweenPageAndTableFormat" xml:space="preserve">
    <value>The ToolTip property of page field {0} and it's table field {1} have the same value and therefore the page field's ToolTip can be removed.</value>
  </data>
  <data name="Rule0066DuplicateToolTipBetweenPageAndTableDescription" xml:space="preserve">
    <value>Informs the user that it is better to only apply the ToolTip property on the table field when the page fields ToolTip is the same.</value>
  </data>
  <data name="Rule0067DisableNotBlankOnSingleFieldPrimaryKeyTitle" xml:space="preserve">
    <value>Set NotBlank to false when 'No. Series' TableRelation exists.</value>
  </data>
  <data name="Rule0067DisableNotBlankOnSingleFieldPrimaryKeyFormat" xml:space="preserve">
    <value>The NotBlank property should be set to false (or removed) if a TableRelation of 'No. Series' is present on the table.</value>
  </data>
  <data name="Rule0067DisableNotBlankOnSingleFieldPrimaryKeyDescription" xml:space="preserve">
    <value>When the 'No. Series' TableRelation is present on the table, assigning the primary key might occur after inserting the record, which could cause an error due to the NotBlank property.</value>
  </data>
  <data name="Rule0068CheckObjectPermissionTitle" xml:space="preserve">
    <value>The Object has missing permissions</value>
  </data>
  <data name="Rule0068CheckObjectPermissionFormat" xml:space="preserve">
    <value>The current object is missing permission "{0}" for tabledata "{1}"</value>
  </data>
  <data name="Rule0068CheckObjectPermissionDescription" xml:space="preserve">
    <value>Informs the user that there are missing permission to access tabledata.</value>
  </data>
  <data name="Rule0069EmptyStatementsTitle" xml:space="preserve">
    <value>Empty statements should be avoided or should have a leading or trailing comment explaining their use.</value>
  </data>
  <data name="Rule0069EmptyStatementsFormat" xml:space="preserve">
    <value>Empty statements should be avoided or should have a leading or trailing comment explaining their use.</value>
  </data>
  <data name="Rule0069EmptyStatementsDescription" xml:space="preserve">
    <value>Empty statements should be avoided or should have a leading or trailing comment explaining their use.</value>
  </data>
  <data name="Rule0070ListObjectsAreOneBasedTitle" xml:space="preserve">
    <value>Zero index access on 1-based List objects.</value>
  </data>
  <data name="Rule0070ListObjectsAreOneBasedFormat" xml:space="preserve">
    <value>List objects are 1-based.</value>
  </data>
  <data name="Rule0070ListObjectsAreOneBasedDescription" xml:space="preserve">
    <value>List objects are 1-based, meaning indexing starts from 1 instead of the conventional 0.</value>
  </data>
  <data name="Rule0071DoNotSetIsHandledToFalseTitle" xml:space="preserve">
    <value>Incorrect 'IsHandled' parameter assignment.</value>
  </data>
  <data name="Rule0071DoNotSetIsHandledToFalseFormat" xml:space="preserve">
    <value>Do not set the 'IsHandled' parameter to 'false' or any value that may be evaluated as false.</value>
  </data>
  <data name="Rule0071DoNotSetIsHandledToFalseDescription" xml:space="preserve">
    <value>The 'IsHandled' parameter must always be set to 'true' when handled. Avoid assigning 'false' or any value that may be evaluated as false.</value>
  </data>
  <data name="Rule0072CheckProcedureDocumentationCommentTitle" xml:space="preserve">
    <value>The documentation comment must match the procedure syntax.</value>
  </data>
  <data name="Rule0072CheckProcedureDocumentationCommentFormat" xml:space="preserve">
    <value>The documentation comment does not match the procedure syntax.</value>
  </data>
  <data name="Rule0072CheckProcedureDocumentationCommentDescription" xml:space="preserve">
    <value>The documentation comment must always match the procedure syntax structure exactly.</value>
  </data>
  <data name="Rule0073EventPublisherIsHandledByVarTitle" xml:space="preserve">
    <value>Handled parameters in event signatures should be passed by var.</value>
  </data>
  <data name="Rule0073EventPublisherIsHandledByVarFormat" xml:space="preserve">
    <value>The Handled parameter in the event signature should be passed by var for proper event handling.</value>
  </data>
  <data name="Rule0073EventPublisherIsHandledByVarDescription" xml:space="preserve">
    <value>Identifies event parameters of type boolean named IsHandled or Handled that are not passed by var.</value>
  </data>
  <data name="Rule0074FlowFilterAssignmentTitle" xml:space="preserve">
    <value>Set values for FlowFilter fields using filtering methods.</value>
  </data>
  <data name="Rule0074FlowFilterAssignmentFormat" xml:space="preserve">
    <value>Direct assignment to the {0} field of type FlowFilter invalidates the filter logic for calculations. Use .SetFilter() or .SetRange() to set the filter correctly.</value>
  </data>
  <data name="Rule0074FlowFilterAssignmentDescription" xml:space="preserve">
    <value>Directly assigning values to FlowFilter fields bypasses their purpose and invalidates the filtering logic, resulting in incorrect or unintended calculations. Instead, use the .SetFilter() or .SetRange() methods to define the appropriate filters.</value>
  </data>
  <data name="Rule0075RecordGetProcedureArgumentsTitle" xml:space="preserve">
    <value>Incorrect number or type of arguments in .Get() method on Record object.</value>
  </data>
  <data name="Rule0075RecordGetProcedureArgumentsFormat" xml:space="preserve">
    <value>Invalid arguments in .Get() method for record {0}: {1}.</value>
  </data>
  <data name="Rule0075RecordGetProcedureArgumentsDescription" xml:space="preserve">
    <value>This rule ensures that calls to the built-in .Get() procedure on Record objects have the correct number and types of arguments matching the primary key (PK) of the record in question.</value>
  </data>
  <data name="Rule0076TableRelationTooLongTitle" xml:space="preserve">
    <value>Table relation field length mismatch</value>
  </data>
  <data name="Rule0076TableRelationTooLongFormat" xml:space="preserve">
    <value>The related field has length {0} ({1}) which is longer than the current field length {2} ({3})</value>
  </data>
  <data name="Rule0076TableRelationTooLongDescription" xml:space="preserve">
    <value>The field with table relation should have at least the same length as the referenced field.</value>
  </data>  
  <data name="Rule0077MissingParenthesisTitle" xml:space="preserve">
    <value>Function calls should have parenthesis even if they do not have any parameters.</value>
  </data>
  <data name="Rule0077MissingParenthesisFormat" xml:space="preserve">
    <value>You must specify open and close parenthesis after '{0}'</value>
  </data>
  <data name="Rule0077MissingParenthesisDescription" xml:space="preserve">
    <value>You must specify open and close parenthesis after '{0}'</value>
  </data>
  <data name="Rule0078TemporaryRecordsTitle" xml:space="preserve">
    <value>Temporary records should not trigger the table triggers.</value>
  </data>
  <data name="Rule0078TemporaryRecordsFormat" xml:space="preserve">
    <value>Temporary records should not trigger the table triggers.</value>
  </data>
  <data name="Rule0078TemporaryRecordsDescription" xml:space="preserve">
    <value>Temporary records should not trigger the table triggers.</value>
  </data>
  <data name="Rule0079NonPublicEventPublisherTitle" xml:space="preserve">
    <value>Event Publishers should be local or internal to allow for future parameter extensions.</value>
  </data>
  <data name="Rule0079NonPublicEventPublisherFormat" xml:space="preserve">
    <value>Event Publishers should be local or internal to allow for future parameter extensions.</value>
  </data>
  <data name="Rule0079NonPublicEventPublisherDescription" xml:space="preserve">
    <value>Event Publishers should be local or internal to allow for future parameter extensions.</value>
  </data>
  <data name="Rule0080AnalyzeJsonTokenJPathTitle" xml:space="preserve">
    <value>Replace double quotes in JPath expressions with two single quotes.</value>
  </data>
  <data name="Rule0080AnalyzeJsonTokenJPathFormat" xml:space="preserve">
    <value>Double quote character detected in JPath expression. Replace all double quotes (") with two single quotes ('').</value>
  </data>
  <data name="Rule0080AnalyzeJsonTokenJPathDescription" xml:space="preserve">
    <value>Detects and warns against the use of double-quote (") characters in JPath expressions.</value>
  </data>
  <data name="Rule0081UseIsEmptyMethodTitle" xml:space="preserve">
    <value>Use Rec.IsEmpty() for checking record existence.</value>
  </data>
  <data name="Rule0081UseIsEmptyMethodFormat" xml:space="preserve">
    <value>Avoid using {0}.Count() for checking record existence. Use {0}.IsEmpty() instead for better performance.</value>
  </data>
  <data name="Rule0081UseIsEmptyMethodDescription" xml:space="preserve">
    <value>To check for the existence of records, use the more efficient Rec.IsEmpty() function instead of Rec.Count().</value>
  </data>
  <data name="Rule0082UseFindWithNextTitle" xml:space="preserve">
    <value>Use Rec.Find('-') with Rec.Next() for checking exactly one record.</value>
  </data>
  <data name="Rule0082UseFindWithNextFormat" xml:space="preserve">
    <value>Use {0}.Find('-') together with {0}.Next() instead of {0}.Count() for performance optimization. Replace {0}.Count() with: {0}.Find('-') and (Rec.Next() {1} 0).</value>
  </data>
  <data name="Rule0082UseFindWithNextDescription" xml:space="preserve">
    <value>Instead of relying on Rec.Count(), you should use a combination of Rec.Find('-') and Rec.Next() for faster and more efficient record checks.</value>
  </data>
  <data name="Rule0083BuiltInDateTimeMethodTitle" xml:space="preserve">
    <value>Use new Date/Time/DateTime methods for extracting parts.</value>
  </data>
  <data name="Rule0083BuiltInDateTimeMethodFormat" xml:space="preserve">
    <value>Use the new method '{0}.{1}' to extract specific parts of date/time values.</value>
  </data>
  <data name="Rule0083BuiltInDateTimeMethodDescription" xml:space="preserve">
    <value>Replace outdated functions for extracting specific parts of Date, Time, and DateTime types (such as day, month, hour, or second) with the new, modernized methods.</value>
  </data>
  <data name="Rule0084UseReturnValueForErrorHandlingTitle" xml:space="preserve">
    <value>Use return value for better error handling.</value>
  </data>
  <data name="Rule0084UseReturnValueForErrorHandlingFormat" xml:space="preserve">
    <value>The return value of the '{0}' method must be used to improve error handling or provide meaningful feedback to the user.</value>
  </data>
  <data name="Rule0084UseReturnValueForErrorHandlingDescription" xml:space="preserve">
    <value>Database read methods, like Record.Get(), returns a boolean indicating whether the record was successfully retrieved. Failing to use this return value can lead to uncaught errors, poor error handling, and a lack of actionable feedback for users when something goes wrong.</value>
  </data>
  <data name="Rule0085LFSeparatorTitle" xml:space="preserve">
    <value>Use the (CR)LFSeparator from the "Type Helper" codeunit.</value>
  </data>
  <data name="Rule0085LFSeparatorFormat" xml:space="preserve">
    <value>Use the (CR)LFSeparator from the "Type Helper" codeunit from the Base Application to define a line feed (LF) or carriage return (CR) variable.</value>
  </data>
  <data name="Rule0085LFSeparatorDescription" xml:space="preserve">
    <value>Avoid manually creating helper methods or assigning character values (e.g., Char := 10 or Text[1] := 10) to define line feed (LF) or carriage return (CR) variables. Instead, use the LFSeparator and CRLFSeparator constants provided by the "Type Helper" codeunit from the Base Application.</value>
  </data>
  <data name="Rule0086PageStyleDataTypeTitle" xml:space="preserve">
    <value>Use the new PageStyle datatype instead string literals.</value>
  </data>
  <data name="Rule0086PageStyleDataTypeFormat" xml:space="preserve">
    <value>Avoid using the string literal '{0}' for page styling. Use the PageStyle datatype instead (PageStyle::{1}).</value>
  </data>
  <data name="Rule0086PageStyleDataTypeDescription" xml:space="preserve">
    <value>Adopting the use of the new PageStyle datatype allows to more easily get the supported pagestyles via IntelliSense and avoids incorrect behaviour when a typo is made in hardcoded strings or label variables.</value>
  </data>
</root>