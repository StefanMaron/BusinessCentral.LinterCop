name: Download AL Language platform artifacts
description: ""

inputs:
  version-number:
    required: true
    description: The version number of the corresponding AL Language
  asset-uri:
    required: true
    description: The asset uri for retrieving the VSIXPackage/NuGetPackage of the AL Language
  asset-type:
    required: true
    description: The asset type, VSIXPackage or NuGetPackage
  target-path:
    required: true
    description: Path to store the artifacts

runs:
  using: composite
  steps:
    - name: Get platform artifact from cache
      id: get_platform_artifact
      uses: actions/cache/restore@v4
      with:
        path: ${{ inputs.target-path }}
        key: al-platform-artifact-${{ inputs.version-number }}
        fail-on-cache-miss: false

    - name: Download platform artifact
      id: download_platform_artifact
      if: steps.get_platform_artifact.outputs.cache-hit != 'true'
      shell: pwsh
      env:
        ASSET_URI: ${{ inputs.asset-uri }}
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        Write-Output "Asset URI: $($env:ASSET_URI)"
        $uri = [System.Uri]$env:ASSET_URI
        $fileName = Split-Path $uri.AbsolutePath -Leaf
        $downloadFilePath = Join-Path $env:RUNNER_TEMP $fileName
        Invoke-WebRequest $env:ASSET_URI -OutFile $downloadFilePath
        echo "path=$($downloadFilePath)" >> $env:GITHUB_OUTPUT

    - name: Extract platform artifact
      if: steps.get_platform_artifact.outputs.cache-hit != 'true'
      shell: pwsh
      env:
        ARCHIVE_PATH: ${{ steps.download_platform_artifact.outputs.path }}
        ASSET_TYPE: ${{ inputs.asset-type }}
        TARGET_PATH: ${{ inputs.target-path }}
        ACTION_PATH: ${{ github.action_path }}
      run: |
        $pathInArchive = switch ($env:ASSET_TYPE) {
          'VSIXPackage' { 'extension\bin\Analyzers' }
          'NuGetPackage' { 'tools\net8.0\any' }
          default { 
            Write-Error "Invalid asset-type: $($env:ASSET_TYPE). Must be 'VSIXPackage' or 'NuGetPackage'."
            exit 1
          }
        }

        Write-Output "Extracting $($env:ASSET_TYPE) from path: $pathInArchive"

        & "$env:ACTION_PATH\Extract-RequiredFiles.ps1" -DestinationPath $env:TARGET_PATH -ArchivePath $env:ARCHIVE_PATH -PathInArchive $pathInArchive

    - name: Add platform artifact to cache
      id: add_hash
      if: steps.get_platform_artifact.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ inputs.target-path }}
        key: al-platform-artifact-${{ inputs.version-number }}
