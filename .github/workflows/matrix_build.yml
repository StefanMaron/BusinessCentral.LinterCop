name: Initialization
on:
  push:
    branches:
      - master
      - prerelease
  workflow_dispatch: null
jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create-release
        uses: release-drafter/release-drafter@v6
        with:
          prerelease: ${{ github.ref != 'refs/heads/master' }}
          commitish: ${{ github.ref }}
          disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get AL Language versions
        id: setup-matrix-combinations
        shell: pwsh
        run: |
          $listing = Invoke-WebRequest -Method POST -UseBasicParsing `
              -Uri https://marketplace.visualstudio.com/_apis/public/gallery/extensionquery?api-version=3.0-preview.1 `
              -Body '{"filters":[{"criteria":[{"filterType":8,"value":"Microsoft.VisualStudio.Code"},{"filterType":12,"value":"4096"},{"filterType":7,"value":"ms-dynamics-smb.al"}],"pageNumber":1,"pageSize":50,"sortBy":0,"sortOrder":0}],"assetTypes":[],"flags":0x192}' `
              -ContentType application/json | ConvertFrom-Json

          $versionLatest = $listing.results.extensions.versions `
          | Where-Object properties -ne $null `
          | Where-Object { $_.properties.key -notcontains 'Microsoft.VisualStudio.Code.PreRelease' } | Select-Object -First 1 -ExpandProperty version

          $versionPreRelease = $listing.results.extensions.versions `
          | Where-Object properties -ne $null `
          | Where-Object { $_.properties.key -contains 'Microsoft.VisualStudio.Code.PreRelease' } | Select-Object -First 1 -ExpandProperty version

          $results = $listing.results | Select-Object -First 1 -ExpandProperty extensions `
          | Select-Object -ExpandProperty versions `
          | Where-Object { [System.Version]('{0}.{1}.{2}.0' -f $_.version.split('.')) -gt [System.Version]"14.0.963280.0" }

          $matrix = @()
          foreach ($result in $results) {
              $assetName = "BusinessCentral.LinterCop.$($result.version).dll"
              $assetUri = $result | Select-Object -ExpandProperty files | Where-Object { $_.assetType -eq "Microsoft.VisualStudio.Services.VSIXPackage" } | Select-Object -ExpandProperty source
              $featureflags = $(3..('{0}' -f $result.version.split('.'))) | ForEach-Object { "#$_" }

              $matrix += [Ordered]@{
                  version      = $result.version;
                  assetname    = $assetName;
                  assetUri     = $assetUri;
                  latest       = $($result.version -eq $versionLatest);
                  prerelease   = $($result.version -eq $versionPreRelease);
                  featureflags = [System.String]::Join("", $featureflags)        
              }
          }
          $MATRIX_COMBINATIONS = @{'include' = $matrix } | ConvertTo-Json -Compress
          Write-Host "::set-output name=matrix-combinations::$($MATRIX_COMBINATIONS)"

          # TODO: Resolve set-output warning from line above 
          #Write-Host "matrix-combinations=$($MATRIX_COMBINATIONS)" >> $GITHUB_OUTPUT

    outputs:
      matrix-combinations: ${{ steps.setup-matrix-combinations.outputs.matrix-combinations }}
      release-id: ${{ steps.create-release.outputs.id }}
      release-tag-name: ${{ steps.create-release.outputs.tag_name }}
      release-upload-url: ${{ steps.create-release.outputs.upload_url }}

  matrix-job:
    runs-on: windows-latest
    needs: setup-matrix
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-combinations) }}
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.*

      - name: Restore dependencies
        run: dotnet restore

      - name: Download platform artifact
        run: Invoke-WebRequest ${{ matrix.assetUri }} -OutFile ALLanguage.vsix

      - name: Unzip vsix
        run: 7z x "ALLanguage.vsix" "-oms-dynamics-smb.al-latest"
          extension\bin\Analyzers -r

      - name: Set current version
        run: (Get-Content AssemblyInfo.cs) -replace 'Version\("([\d\.]+)"\)]',
          ("Version(""" + ('${{ needs.setup-matrix.outputs.release-tag-name }}'
          -replace "v","") + """)]") |  Out-File AssemblyInfo.cs

      - name: Build
        run: dotnet build /p:DefineConstants=${{ matrix.featureflags }} --no-restore --configuration Release

      ### Release Asset
      - name: Remove possible existing Release Asset
        uses: flcdrg/remove-release-asset-action@v4.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.setup-matrix.outputs.release-id }}
          asset_name: ${{ matrix.assetname }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup-matrix.outputs.release-upload-url }}
          asset_path: bin/Release/netstandard2.1/BusinessCentral.LinterCop.dll
          asset_name: ${{ matrix.assetname }}
          asset_content_type: application/octet-stream

      ### Release Asset as Latest
      - name: Remove possible existing Release Asset (Latest)
        uses: flcdrg/remove-release-asset-action@v4.0.2
        if: ${{ matrix.latest }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.setup-matrix.outputs.release-id }}
          asset_name: BusinessCentral.LinterCop.Latest.dll

      - name: Upload Release Asset (Latest)
        id: upload-release-asset-latest
        uses: actions/upload-release-asset@v1
        if: ${{ matrix.latest }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup-matrix.outputs.release-upload-url }}
          asset_path: bin/Release/netstandard2.1/BusinessCentral.LinterCop.dll
          asset_name: BusinessCentral.LinterCop.Latest.dll
          asset_content_type: application/octet-stream

      ### Release Asset as Pre-Release
      - name: Remove possible existing Release Asset (Pre-Release)
        uses: flcdrg/remove-release-asset-action@v4.0.2
        if: ${{ matrix.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.setup-matrix.outputs.release-id }}
          asset_name: BusinessCentral.LinterCop.Prerelease.dll

      - name: Upload Release Asset (Pre-Release)
        id: upload-release-asset-prerelease
        uses: actions/upload-release-asset@v1
        if: ${{ matrix.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup-matrix.outputs.release-upload-url }}
          asset_path: bin/Release/netstandard2.1/BusinessCentral.LinterCop.dll
          asset_name: BusinessCentral.LinterCop.Prerelease.dll
          asset_content_type: application/octet-stream

      ### Compatilibty
      ### Release Asset as Current
      - name: Remove possible existing Release Asset (Current)
        uses: flcdrg/remove-release-asset-action@v4.0.2
        if: ${{ matrix.latest }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.setup-matrix.outputs.release-id }}
          asset_name: BusinessCentral.LinterCop.current.dll

      - name: Upload Release Asset (Current)
        id: upload-release-asset-current
        uses: actions/upload-release-asset@v1
        if: ${{ matrix.latest }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup-matrix.outputs.release-upload-url }}
          asset_path: bin/Release/netstandard2.1/BusinessCentral.LinterCop.dll
          asset_name: BusinessCentral.LinterCop.current.dll
          asset_content_type: application/octet-stream

      ### Release Asset as Next
      - name: Remove possible existing Release Asset (Next)
        uses: flcdrg/remove-release-asset-action@v4.0.2
        if: ${{ matrix.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.setup-matrix.outputs.release-id }}
          asset_name: BusinessCentral.LinterCop.next.dll

      - name: Upload Release Asset (Next)
        id: upload-release-asset-next
        uses: actions/upload-release-asset@v1
        if: ${{ matrix.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup-matrix.outputs.release-upload-url }}
          asset_path: bin/Release/netstandard2.1/BusinessCentral.LinterCop.dll
          asset_name: BusinessCentral.LinterCop.next.dll
          asset_content_type: application/octet-stream
